
-# Deze broncode is openbaar gemaakt vanwege een Woo-verzoek zodat deze
-# gericht is op transparantie en niet op hergebruik. Hergebruik van 
-# de broncode is toegestaan onder de EUPL licentie, met uitzondering 
-# van broncode waarvoor een andere licentie is aangegeven.
-# 
-# Het archief waar dit bestand deel van uitmaakt is te vinden op:
-#   https://github.com/MinBZK/woo-besluit-broncode-digid
-# 
-# Eventuele kwetsbaarheden kunnen worden gemeld bij het NCSC via:
-#   https://www.ncsc.nl/contact/kwetsbaarheid-melden
-# onder vermelding van "Logius, openbaar gemaakte broncode DigiD" 
-# 
-# Voor overige vragen over dit Woo-besluit kunt u mailen met open@logius.nl
-# 
-# This code has been disclosed in response to a request under the Dutch
-# Open Government Act ("Wet open Overheid"). This implies that publication 
-# is primarily driven by the need for transparence, not re-use.
-# Re-use is permitted under the EUPL-license, with the exception 
-# of source files that contain a different license.
-# 
-# The archive that this file originates from can be found at:
-#   https://github.com/MinBZK/woo-besluit-broncode-digid
-# 
-# Security vulnerabilities may be responsibly disclosed via the Dutch NCSC:
-#   https://www.ncsc.nl/contact/kwetsbaarheid-melden
-# using the reference "Logius, publicly disclosed source code DigiD" 
-# 
-# Other questions regarding this Open Goverment Act decision may be
-# directed via email to open@logius.nl

- if session[:session].eql?('activation')
  = heading_with_icon(t('activate'))
- else
  = webservice.present? ? heading_with_icon(t('log_in_at_only'), webservice_name) : heading_with_icon(t('log_in'))

- if session[:session].eql?('activation')
  = render('shared/news_item', news_items: @news_items)

  %h2.orange_heading= t('log_in')
- else
  %h2.orange_heading= t('login_in_fill_in_your_username_and_password')
- if @session_ends_label && wrapped_session.expires_at.present?
  = render('shared/session_countdown', key: 'no_extension')
= flash_alert
= flash_notice
- if session[:session].eql?('activation')
  = block_with_icon(t("log_in_to_activate_your_digid_or_check_sms").html_safe, :information)

= extended_form_for(@auth, url: sign_in_url, html: { :class => 'remember_login' }) do |form|
  .normal-login#normal-login
    = form.header(nil, base: :authentication, show_fields_required: false)
    - unless session[:session].eql?('activation')
      = form.hidden_field(:type_account)
    = form.text_field(:username, label: t('digid_username'), required: true, autocapitalize: 'none', fieldset_id: 'username-field', hide_required_indicator: true)
    = form.password_field(:password, label: t('password'), required: true, fieldset_id: 'password-field',fieldset_class: "capslock_notifier", example: t('caps_lock_is_on'), toggle_text: true, hide_required_indicator: true)
    = form.custom_check_box(:remember_login, box_label: t('remember_login'))
    - if session[:session].eql?('activation')
      - buttons = [{action: :log_in, arrow: true}, {action: :cancel, arrow: true}]
    - else
      - buttons = [{action: :log_in, arrow: true}]
    = form.buttons(*buttons) do
      - if !session[:session].eql?('activation')
        = cancel_button(sign_in_url, action: :previous, arrow: true)

- unless session[:session].eql?('activation')
  %ul.list-with-arrows.margin-bottom-48px
    %li#forgot_password= link_to(t('forgot_password'), request_recover_password_url)
    %li#request-new-digid= link_to(t('no_digid_request_new_digid'), new_registration_url)

= javascript_include_tag("inline/clipboard", nonce: content_security_policy_script_nonce) if APP_CONFIG['dot_environment']
