
-# Deze broncode is openbaar gemaakt vanwege een Woo-verzoek zodat deze
-# gericht is op transparantie en niet op hergebruik. Hergebruik van 
-# de broncode is toegestaan onder de EUPL licentie, met uitzondering 
-# van broncode waarvoor een andere licentie is aangegeven.
-# 
-# Het archief waar dit bestand deel van uitmaakt is te vinden op:
-#   https://github.com/MinBZK/woo-besluit-broncode-digid
-# 
-# Eventuele kwetsbaarheden kunnen worden gemeld bij het NCSC via:
-#   https://www.ncsc.nl/contact/kwetsbaarheid-melden
-# onder vermelding van "Logius, openbaar gemaakte broncode DigiD" 
-# 
-# Voor overige vragen over dit Woo-besluit kunt u mailen met open@logius.nl
-# 
-# This code has been disclosed in response to a request under the Dutch
-# Open Government Act ("Wet open Overheid"). This implies that publication 
-# is primarily driven by the need for transparence, not re-use.
-# Re-use is permitted under the EUPL-license, with the exception 
-# of source files that contain a different license.
-# 
-# The archive that this file originates from can be found at:
-#   https://github.com/MinBZK/woo-besluit-broncode-digid
-# 
-# Security vulnerabilities may be responsibly disclosed via the Dutch NCSC:
-#   https://www.ncsc.nl/contact/kwetsbaarheid-melden
-# using the reference "Logius, publicly disclosed source code DigiD" 
-# 
-# Other questions regarding this Open Goverment Act decision may be
-# directed via email to open@logius.nl

- if @results.empty?
  %h1 Geen resultaten.
- else
  %h1 Zoek resultaten voor '#{truncate(params[:query], length: 100)}'
  = render 'accounts', sectorcodes: @results[:sectorcode] if can? :read, Account
  %br
  - if params[:query] =~ Regexp.only(CharacterClass::BSN_FORMAT) && elf_proef_helper(params[:query])
    .actions_top= link_to("Raadpleeg BRP voor #{params[:query]}", view_gba_popup_path(nummer: params[:query]), remote: true, class: 'edit_button') if can? :view_gba_status, Account
  %br
  = render 'gba_blocks', gba_blocks: @results[:gba_block]

  %br
  = render 'webservices', webservices: @results[:webservice] if can? :read, Webservice

  %br
  = render 'front_desks', front_desks: @results[:front_desk] if can? :read, FrontDesk

  %br
  = render 'afmeldingen', afmeldingen: @results[:afmeldlijst] if can? :read, Afmeldlijst

  %br
  = render 'emails', emails: @results[:email] if can? :search_email, Account

  %br
  = render 'emails_historic', emails: @results[:email_historic] if can? :search_email, Account

  %br
  = render 'mobile_numbers', mobile_numbers: @results[:mobile] if can? :search_mobile, Account

  %br
  = render 'mobile_numbers_historic', mobile_numbers: @results[:mobile_historic] if can? :search_mobile, Account

  %br
  = render 'usernames', usernames: @results[:username] if can? :search_username, Account

  %br
  = render 'usernames_historic', usernames_historic: @results[:username_historic] if can? :search_username, Account
