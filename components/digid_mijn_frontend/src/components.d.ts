/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { RouterHistory } from "@stencil/router";
export namespace Components {
    interface AppRoot {
    }
    interface DdAlert {
        /**
          * Toggles whether or not to display the close icon.
          * @default false
         */
        "allowClose": boolean;
        /**
          * The body text to display.
         */
        "body": string;
        /**
          * The type of the alert, toggling the correct styling and icon.
          * @default 'info'
         */
        "type": string;
    }
    interface DdBackdrop {
        /**
          * Moves the element back to its original parent from the .dd-backdrop__children element found inside the dd-backrop in the body.
          * @param element
         */
        "hideElement": (element: any) => Promise<void>;
        /**
          * Moves the element from its current parent to the .dd-backdrop__children element found inside the dd-backrop in the body.
          * @param element
         */
        "showElement": (element: Element) => Promise<void>;
    }
    interface DdBanner {
        /**
          * The theme of the banner.
          * @options twoFactor, app and idCheck
         */
        "theme": 'twoFactor' | 'app' | 'idCheck';
    }
    interface DdButton {
        "ariaText": string;
        /**
          * Toggles whether or not to display the a chevron.
          * @options before, after
         */
        "arrow": string;
        "noFocus": boolean;
        "noHover": boolean;
        "roleOverride": string;
        "sizeChange": boolean;
        /**
          * The button text to display.
         */
        "text": string;
        /**
          * The theme of the button.
          * @default primary
          * @options primary, secondary and tertiary
         */
        "theme": string;
        "touchscreen": boolean;
    }
    interface DdChevron {
        /**
          * The direction the chevron is facing
          * @default right
          * @options right, left, up, down
         */
        "direction": string;
    }
    interface DdEmptyState {
        /**
          * Whether the empty state is for a card Setting this value to false will show no body text
          * @default true
         */
        "card": boolean;
        /**
          * the document data property, used to alter the document empty state text
         */
        "documentData": any;
        /**
          * Whether the empty state is displaying an error
          * @default false
         */
        "error": boolean;
        /**
          * The type of empty state shown.
          * @options App, ID, Username
         */
        "type": 'app' | 'id' | 'error';
    }
    interface DdFooter {
    }
    interface DdHeader {
    }
    interface DdHighlight {
        /**
          * Highlight using a blue background instead of bold.
         */
        "blue": boolean;
        /**
          * The text to highlight.
         */
        "highlightText": string;
        /**
          * The text to display.
         */
        "text": string;
    }
    interface DdIcon {
        "name": string;
        "showMargin": boolean;
    }
    interface DdInput {
        /**
          * Toggles whether or not to display the close icon.
          * @default false
         */
        "allowClear": boolean;
        /**
          * Clears the input internally and for the nested input element.
         */
        "clearInput": () => Promise<void>;
        /**
          * Whether the built in browser's autocomplete should show or not.
         */
        "disableAutoComplete": boolean;
        /**
          * Toggles whether or not to add the '.dd-input--has-error' class.
          * @default false
         */
        "hasError": boolean;
        /**
          * The hint text to display between the label and input.
         */
        "hint": string;
        /**
          * The aria label to show, as a fallback the label and secondary label will be used or the placeholder text.
         */
        "inputAriaLabel": string;
        /**
          * The label to show above the input field.
         */
        "label": string;
        /**
          * The maximum character allowed for the input.
         */
        "maxLength": number;
        /**
          * The name to apply to the input field.
         */
        "name": string;
        /**
          * The placeholder to display when no input is showing.
         */
        "placeholder": string;
        /**
          * The secondary, slightly lighter, label to show next to the primary label.
         */
        "secondaryLabel": string;
        /**
          * The type of the input.
         */
        "type": string;
        /**
          * The value of the input.
         */
        "value": any;
    }
    interface DdLangToggle {
    }
    interface DdLink {
        "link": string;
        "text": string;
        "touchscreen": boolean;
    }
    interface DdLoginOptions {
        "history": RouterHistory;
    }
    interface DdLoginOptionsAccordionWrapper {
        "accountData": any;
        "appsArray": any[];
        "appsDisabled": boolean;
        "docData": any;
        "hasNoDocuments": boolean;
    }
    interface DdLoginOptionsApp {
        /**
          * Whether the accordion is opened
          * @Default false
         */
        "accordionOpen": boolean;
        /**
          * The app data object provided as input
         */
        "appData": any;
        "closeAccordion": () => Promise<void>;
        /**
          * Whether the component is shown as a card or as an accordion
          * @Default card
         */
        "view": string;
    }
    interface DdLoginOptionsAppDetails {
        "data": any;
        "history": RouterHistory;
    }
    interface DdLoginOptionsContactInfo {
        "accountData": any;
    }
    interface DdLoginOptionsId {
        /**
          * Whether the accordion is opened
          * @Default false
         */
        "accordionOpen": boolean;
        /**
          * Prop used to display multiple document numbers in the same card
          * @Default true
         */
        "allowMultipleDocumentNumbers": boolean;
        "closeAccordion": () => Promise<void>;
        /**
          * The document data object provided as input
         */
        "document": any;
        /**
          * Whether the component is shown as a card or as an accordion
          * @Default card
         */
        "view": string;
    }
    interface DdLoginOptionsIdDetails {
        "docData": any;
        "history": RouterHistory;
    }
    interface DdLoginOptionsUsername {
        /**
          * Whether the accordion is opened
          * @Default false
         */
        "accordionOpen": boolean;
        /**
          * The app data object provided as input
         */
        "accountData": any;
        "closeAccordion": () => Promise<void>;
        /**
          * Whether the component is shown as a card or as an accordion
          * @Default card
         */
        "view": string;
    }
    interface DdLoginOptionsUsernameDetails {
        "history": RouterHistory;
        "userData": any;
    }
    interface DdMenu {
        "history": RouterHistory;
        "showUsageHistory": boolean;
    }
    interface DdModal {
        /**
          * The header text to display.
         */
        "header": string;
        /**
          * Hides the modal.
         */
        "hideModal": () => Promise<void>;
        /**
          * Shows the modal.
         */
        "showModal": () => Promise<void>;
    }
    interface DdPaginator {
        /**
          * The current page number.
         */
        "currentPage": number;
        /**
          * The total amount of pages.
         */
        "totalPages": number;
    }
    interface DdSearch {
        /**
          * Toggles the loading block in the dropdown.
         */
        "hideDropdown": boolean;
        "isExecuted": boolean;
        /**
          * Toggles the loading block in the dropdown.
         */
        "isLoading": boolean;
        /**
          * The label to show above the input field.
         */
        "label": string;
        /**
          * The placeholder to display when no input is showing.
         */
        "placeholder": string;
        /**
          * The results of the search.
         */
        "results": any;
        /**
          * The value of the input.
         */
        "value": any;
    }
    interface DdSessionHandler {
        "timeoutSession": () => Promise<[void, void]>;
    }
    interface DdSkipToButtons {
    }
    interface DdStatus {
        "activation": boolean;
        "active": boolean;
        "completed": boolean;
        "icon": boolean;
        "statusText": string;
    }
    interface DdToast {
        "clearMessages": () => Promise<void>;
        "pushMessage": (body: any, methods?: any) => Promise<void>;
    }
    interface DdTooltip {
        "ariaText": string;
        "contentId": string;
        "tooltipOpened": boolean;
    }
    interface DdTooltipContent {
    }
    interface DdUsageHistory {
        "history": RouterHistory;
    }
    interface DdWelcome {
        "data": any;
    }
}
export interface DdAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdAlertElement;
}
export interface DdBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdBannerElement;
}
export interface DdInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdInputElement;
}
export interface DdLangToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdLangToggleElement;
}
export interface DdLoginOptionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdLoginOptionsElement;
}
export interface DdLoginOptionsAppCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdLoginOptionsAppElement;
}
export interface DdLoginOptionsIdCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdLoginOptionsIdElement;
}
export interface DdLoginOptionsUsernameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdLoginOptionsUsernameElement;
}
export interface DdModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdModalElement;
}
export interface DdPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdPaginatorElement;
}
export interface DdSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdSearchElement;
}
export interface DdUsageHistoryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDdUsageHistoryElement;
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLDdAlertElement extends Components.DdAlert, HTMLStencilElement {
    }
    var HTMLDdAlertElement: {
        prototype: HTMLDdAlertElement;
        new (): HTMLDdAlertElement;
    };
    interface HTMLDdBackdropElement extends Components.DdBackdrop, HTMLStencilElement {
    }
    var HTMLDdBackdropElement: {
        prototype: HTMLDdBackdropElement;
        new (): HTMLDdBackdropElement;
    };
    interface HTMLDdBannerElement extends Components.DdBanner, HTMLStencilElement {
    }
    var HTMLDdBannerElement: {
        prototype: HTMLDdBannerElement;
        new (): HTMLDdBannerElement;
    };
    interface HTMLDdButtonElement extends Components.DdButton, HTMLStencilElement {
    }
    var HTMLDdButtonElement: {
        prototype: HTMLDdButtonElement;
        new (): HTMLDdButtonElement;
    };
    interface HTMLDdChevronElement extends Components.DdChevron, HTMLStencilElement {
    }
    var HTMLDdChevronElement: {
        prototype: HTMLDdChevronElement;
        new (): HTMLDdChevronElement;
    };
    interface HTMLDdEmptyStateElement extends Components.DdEmptyState, HTMLStencilElement {
    }
    var HTMLDdEmptyStateElement: {
        prototype: HTMLDdEmptyStateElement;
        new (): HTMLDdEmptyStateElement;
    };
    interface HTMLDdFooterElement extends Components.DdFooter, HTMLStencilElement {
    }
    var HTMLDdFooterElement: {
        prototype: HTMLDdFooterElement;
        new (): HTMLDdFooterElement;
    };
    interface HTMLDdHeaderElement extends Components.DdHeader, HTMLStencilElement {
    }
    var HTMLDdHeaderElement: {
        prototype: HTMLDdHeaderElement;
        new (): HTMLDdHeaderElement;
    };
    interface HTMLDdHighlightElement extends Components.DdHighlight, HTMLStencilElement {
    }
    var HTMLDdHighlightElement: {
        prototype: HTMLDdHighlightElement;
        new (): HTMLDdHighlightElement;
    };
    interface HTMLDdIconElement extends Components.DdIcon, HTMLStencilElement {
    }
    var HTMLDdIconElement: {
        prototype: HTMLDdIconElement;
        new (): HTMLDdIconElement;
    };
    interface HTMLDdInputElement extends Components.DdInput, HTMLStencilElement {
    }
    var HTMLDdInputElement: {
        prototype: HTMLDdInputElement;
        new (): HTMLDdInputElement;
    };
    interface HTMLDdLangToggleElement extends Components.DdLangToggle, HTMLStencilElement {
    }
    var HTMLDdLangToggleElement: {
        prototype: HTMLDdLangToggleElement;
        new (): HTMLDdLangToggleElement;
    };
    interface HTMLDdLinkElement extends Components.DdLink, HTMLStencilElement {
    }
    var HTMLDdLinkElement: {
        prototype: HTMLDdLinkElement;
        new (): HTMLDdLinkElement;
    };
    interface HTMLDdLoginOptionsElement extends Components.DdLoginOptions, HTMLStencilElement {
    }
    var HTMLDdLoginOptionsElement: {
        prototype: HTMLDdLoginOptionsElement;
        new (): HTMLDdLoginOptionsElement;
    };
    interface HTMLDdLoginOptionsAccordionWrapperElement extends Components.DdLoginOptionsAccordionWrapper, HTMLStencilElement {
    }
    var HTMLDdLoginOptionsAccordionWrapperElement: {
        prototype: HTMLDdLoginOptionsAccordionWrapperElement;
        new (): HTMLDdLoginOptionsAccordionWrapperElement;
    };
    interface HTMLDdLoginOptionsAppElement extends Components.DdLoginOptionsApp, HTMLStencilElement {
    }
    var HTMLDdLoginOptionsAppElement: {
        prototype: HTMLDdLoginOptionsAppElement;
        new (): HTMLDdLoginOptionsAppElement;
    };
    interface HTMLDdLoginOptionsAppDetailsElement extends Components.DdLoginOptionsAppDetails, HTMLStencilElement {
    }
    var HTMLDdLoginOptionsAppDetailsElement: {
        prototype: HTMLDdLoginOptionsAppDetailsElement;
        new (): HTMLDdLoginOptionsAppDetailsElement;
    };
    interface HTMLDdLoginOptionsContactInfoElement extends Components.DdLoginOptionsContactInfo, HTMLStencilElement {
    }
    var HTMLDdLoginOptionsContactInfoElement: {
        prototype: HTMLDdLoginOptionsContactInfoElement;
        new (): HTMLDdLoginOptionsContactInfoElement;
    };
    interface HTMLDdLoginOptionsIdElement extends Components.DdLoginOptionsId, HTMLStencilElement {
    }
    var HTMLDdLoginOptionsIdElement: {
        prototype: HTMLDdLoginOptionsIdElement;
        new (): HTMLDdLoginOptionsIdElement;
    };
    interface HTMLDdLoginOptionsIdDetailsElement extends Components.DdLoginOptionsIdDetails, HTMLStencilElement {
    }
    var HTMLDdLoginOptionsIdDetailsElement: {
        prototype: HTMLDdLoginOptionsIdDetailsElement;
        new (): HTMLDdLoginOptionsIdDetailsElement;
    };
    interface HTMLDdLoginOptionsUsernameElement extends Components.DdLoginOptionsUsername, HTMLStencilElement {
    }
    var HTMLDdLoginOptionsUsernameElement: {
        prototype: HTMLDdLoginOptionsUsernameElement;
        new (): HTMLDdLoginOptionsUsernameElement;
    };
    interface HTMLDdLoginOptionsUsernameDetailsElement extends Components.DdLoginOptionsUsernameDetails, HTMLStencilElement {
    }
    var HTMLDdLoginOptionsUsernameDetailsElement: {
        prototype: HTMLDdLoginOptionsUsernameDetailsElement;
        new (): HTMLDdLoginOptionsUsernameDetailsElement;
    };
    interface HTMLDdMenuElement extends Components.DdMenu, HTMLStencilElement {
    }
    var HTMLDdMenuElement: {
        prototype: HTMLDdMenuElement;
        new (): HTMLDdMenuElement;
    };
    interface HTMLDdModalElement extends Components.DdModal, HTMLStencilElement {
    }
    var HTMLDdModalElement: {
        prototype: HTMLDdModalElement;
        new (): HTMLDdModalElement;
    };
    interface HTMLDdPaginatorElement extends Components.DdPaginator, HTMLStencilElement {
    }
    var HTMLDdPaginatorElement: {
        prototype: HTMLDdPaginatorElement;
        new (): HTMLDdPaginatorElement;
    };
    interface HTMLDdSearchElement extends Components.DdSearch, HTMLStencilElement {
    }
    var HTMLDdSearchElement: {
        prototype: HTMLDdSearchElement;
        new (): HTMLDdSearchElement;
    };
    interface HTMLDdSessionHandlerElement extends Components.DdSessionHandler, HTMLStencilElement {
    }
    var HTMLDdSessionHandlerElement: {
        prototype: HTMLDdSessionHandlerElement;
        new (): HTMLDdSessionHandlerElement;
    };
    interface HTMLDdSkipToButtonsElement extends Components.DdSkipToButtons, HTMLStencilElement {
    }
    var HTMLDdSkipToButtonsElement: {
        prototype: HTMLDdSkipToButtonsElement;
        new (): HTMLDdSkipToButtonsElement;
    };
    interface HTMLDdStatusElement extends Components.DdStatus, HTMLStencilElement {
    }
    var HTMLDdStatusElement: {
        prototype: HTMLDdStatusElement;
        new (): HTMLDdStatusElement;
    };
    interface HTMLDdToastElement extends Components.DdToast, HTMLStencilElement {
    }
    var HTMLDdToastElement: {
        prototype: HTMLDdToastElement;
        new (): HTMLDdToastElement;
    };
    interface HTMLDdTooltipElement extends Components.DdTooltip, HTMLStencilElement {
    }
    var HTMLDdTooltipElement: {
        prototype: HTMLDdTooltipElement;
        new (): HTMLDdTooltipElement;
    };
    interface HTMLDdTooltipContentElement extends Components.DdTooltipContent, HTMLStencilElement {
    }
    var HTMLDdTooltipContentElement: {
        prototype: HTMLDdTooltipContentElement;
        new (): HTMLDdTooltipContentElement;
    };
    interface HTMLDdUsageHistoryElement extends Components.DdUsageHistory, HTMLStencilElement {
    }
    var HTMLDdUsageHistoryElement: {
        prototype: HTMLDdUsageHistoryElement;
        new (): HTMLDdUsageHistoryElement;
    };
    interface HTMLDdWelcomeElement extends Components.DdWelcome, HTMLStencilElement {
    }
    var HTMLDdWelcomeElement: {
        prototype: HTMLDdWelcomeElement;
        new (): HTMLDdWelcomeElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "dd-alert": HTMLDdAlertElement;
        "dd-backdrop": HTMLDdBackdropElement;
        "dd-banner": HTMLDdBannerElement;
        "dd-button": HTMLDdButtonElement;
        "dd-chevron": HTMLDdChevronElement;
        "dd-empty-state": HTMLDdEmptyStateElement;
        "dd-footer": HTMLDdFooterElement;
        "dd-header": HTMLDdHeaderElement;
        "dd-highlight": HTMLDdHighlightElement;
        "dd-icon": HTMLDdIconElement;
        "dd-input": HTMLDdInputElement;
        "dd-lang-toggle": HTMLDdLangToggleElement;
        "dd-link": HTMLDdLinkElement;
        "dd-login-options": HTMLDdLoginOptionsElement;
        "dd-login-options-accordion-wrapper": HTMLDdLoginOptionsAccordionWrapperElement;
        "dd-login-options-app": HTMLDdLoginOptionsAppElement;
        "dd-login-options-app-details": HTMLDdLoginOptionsAppDetailsElement;
        "dd-login-options-contact-info": HTMLDdLoginOptionsContactInfoElement;
        "dd-login-options-id": HTMLDdLoginOptionsIdElement;
        "dd-login-options-id-details": HTMLDdLoginOptionsIdDetailsElement;
        "dd-login-options-username": HTMLDdLoginOptionsUsernameElement;
        "dd-login-options-username-details": HTMLDdLoginOptionsUsernameDetailsElement;
        "dd-menu": HTMLDdMenuElement;
        "dd-modal": HTMLDdModalElement;
        "dd-paginator": HTMLDdPaginatorElement;
        "dd-search": HTMLDdSearchElement;
        "dd-session-handler": HTMLDdSessionHandlerElement;
        "dd-skip-to-buttons": HTMLDdSkipToButtonsElement;
        "dd-status": HTMLDdStatusElement;
        "dd-toast": HTMLDdToastElement;
        "dd-tooltip": HTMLDdTooltipElement;
        "dd-tooltip-content": HTMLDdTooltipContentElement;
        "dd-usage-history": HTMLDdUsageHistoryElement;
        "dd-welcome": HTMLDdWelcomeElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface DdAlert {
        /**
          * Toggles whether or not to display the close icon.
          * @default false
         */
        "allowClose"?: boolean;
        /**
          * The body text to display.
         */
        "body"?: string;
        /**
          * Dispatched the dismiss event when the X is clicked.
         */
        "onDismiss"?: (event: DdAlertCustomEvent<any>) => void;
        /**
          * The type of the alert, toggling the correct styling and icon.
          * @default 'info'
         */
        "type"?: string;
    }
    interface DdBackdrop {
    }
    interface DdBanner {
        "onBannerClosed"?: (event: DdBannerCustomEvent<string>) => void;
        /**
          * The theme of the banner.
          * @options twoFactor, app and idCheck
         */
        "theme": 'twoFactor' | 'app' | 'idCheck';
    }
    interface DdButton {
        "ariaText"?: string;
        /**
          * Toggles whether or not to display the a chevron.
          * @options before, after
         */
        "arrow"?: string;
        "noFocus"?: boolean;
        "noHover"?: boolean;
        "roleOverride"?: string;
        "sizeChange"?: boolean;
        /**
          * The button text to display.
         */
        "text"?: string;
        /**
          * The theme of the button.
          * @default primary
          * @options primary, secondary and tertiary
         */
        "theme"?: string;
        "touchscreen"?: boolean;
    }
    interface DdChevron {
        /**
          * The direction the chevron is facing
          * @default right
          * @options right, left, up, down
         */
        "direction"?: string;
    }
    interface DdEmptyState {
        /**
          * Whether the empty state is for a card Setting this value to false will show no body text
          * @default true
         */
        "card"?: boolean;
        /**
          * the document data property, used to alter the document empty state text
         */
        "documentData"?: any;
        /**
          * Whether the empty state is displaying an error
          * @default false
         */
        "error"?: boolean;
        /**
          * The type of empty state shown.
          * @options App, ID, Username
         */
        "type": 'app' | 'id' | 'error';
    }
    interface DdFooter {
    }
    interface DdHeader {
    }
    interface DdHighlight {
        /**
          * Highlight using a blue background instead of bold.
         */
        "blue"?: boolean;
        /**
          * The text to highlight.
         */
        "highlightText"?: string;
        /**
          * The text to display.
         */
        "text"?: string;
    }
    interface DdIcon {
        "name"?: string;
        "showMargin"?: boolean;
    }
    interface DdInput {
        /**
          * Toggles whether or not to display the close icon.
          * @default false
         */
        "allowClear"?: boolean;
        /**
          * Whether the built in browser's autocomplete should show or not.
         */
        "disableAutoComplete"?: boolean;
        /**
          * Toggles whether or not to add the '.dd-input--has-error' class.
          * @default false
         */
        "hasError"?: boolean;
        /**
          * The hint text to display between the label and input.
         */
        "hint"?: string;
        /**
          * The aria label to show, as a fallback the label and secondary label will be used or the placeholder text.
         */
        "inputAriaLabel"?: string;
        /**
          * The label to show above the input field.
         */
        "label"?: string;
        /**
          * The maximum character allowed for the input.
         */
        "maxLength"?: number;
        /**
          * The name to apply to the input field.
         */
        "name"?: string;
        /**
          * Dispatched the clear event when the X is clicked.
         */
        "onClear"?: (event: DdInputCustomEvent<any>) => void;
        /**
          * The placeholder to display when no input is showing.
         */
        "placeholder"?: string;
        /**
          * The secondary, slightly lighter, label to show next to the primary label.
         */
        "secondaryLabel"?: string;
        /**
          * The type of the input.
         */
        "type"?: string;
        /**
          * The value of the input.
         */
        "value"?: any;
    }
    interface DdLangToggle {
        "onLanguageToggled"?: (event: DdLangToggleCustomEvent<any>) => void;
    }
    interface DdLink {
        "link"?: string;
        "text"?: string;
        "touchscreen"?: boolean;
    }
    interface DdLoginOptions {
        "history"?: RouterHistory;
        "onNavigationClicked"?: (event: DdLoginOptionsCustomEvent<string>) => void;
    }
    interface DdLoginOptionsAccordionWrapper {
        "accountData"?: any;
        "appsArray"?: any[];
        "appsDisabled"?: boolean;
        "docData"?: any;
        "hasNoDocuments"?: boolean;
    }
    interface DdLoginOptionsApp {
        /**
          * Whether the accordion is opened
          * @Default false
         */
        "accordionOpen"?: boolean;
        /**
          * The app data object provided as input
         */
        "appData"?: any;
        /**
          * An event triggered when the accordion is opened by the user
         */
        "onAccordionOpened"?: (event: DdLoginOptionsAppCustomEvent<string>) => void;
        /**
          * Whether the component is shown as a card or as an accordion
          * @Default card
         */
        "view"?: string;
    }
    interface DdLoginOptionsAppDetails {
        "data"?: any;
        "history"?: RouterHistory;
    }
    interface DdLoginOptionsContactInfo {
        "accountData"?: any;
    }
    interface DdLoginOptionsId {
        /**
          * Whether the accordion is opened
          * @Default false
         */
        "accordionOpen"?: boolean;
        /**
          * Prop used to display multiple document numbers in the same card
          * @Default true
         */
        "allowMultipleDocumentNumbers"?: boolean;
        /**
          * The document data object provided as input
         */
        "document"?: any;
        /**
          * An event triggered when the accordion is opened by the user
         */
        "onAccordionOpened"?: (event: DdLoginOptionsIdCustomEvent<string>) => void;
        /**
          * Whether the component is shown as a card or as an accordion
          * @Default card
         */
        "view"?: string;
    }
    interface DdLoginOptionsIdDetails {
        "docData"?: any;
        "history"?: RouterHistory;
    }
    interface DdLoginOptionsUsername {
        /**
          * Whether the accordion is opened
          * @Default false
         */
        "accordionOpen"?: boolean;
        /**
          * The app data object provided as input
         */
        "accountData"?: any;
        /**
          * An event triggered when the accordion is opened by the user
         */
        "onAccordionOpened"?: (event: DdLoginOptionsUsernameCustomEvent<string>) => void;
        /**
          * Whether the component is shown as a card or as an accordion
          * @Default card
         */
        "view"?: string;
    }
    interface DdLoginOptionsUsernameDetails {
        "history"?: RouterHistory;
        "userData"?: any;
    }
    interface DdMenu {
        "history"?: RouterHistory;
        "showUsageHistory"?: boolean;
    }
    interface DdModal {
        /**
          * The header text to display.
         */
        "header"?: string;
        /**
          * Dispatched the beforeClose before hiding the modal.
         */
        "onAfterHide"?: (event: DdModalCustomEvent<any>) => void;
        /**
          * Dispatched the beforeHide before hiding the modal.
         */
        "onBeforeHide"?: (event: DdModalCustomEvent<any>) => void;
    }
    interface DdPaginator {
        /**
          * The current page number.
         */
        "currentPage"?: number;
        /**
          * Emits an event when the currentPage changes.
         */
        "onPageChange"?: (event: DdPaginatorCustomEvent<number>) => void;
        /**
          * The total amount of pages.
         */
        "totalPages"?: number;
    }
    interface DdSearch {
        /**
          * Toggles the loading block in the dropdown.
         */
        "hideDropdown"?: boolean;
        "isExecuted"?: boolean;
        /**
          * Toggles the loading block in the dropdown.
         */
        "isLoading"?: boolean;
        /**
          * The label to show above the input field.
         */
        "label"?: string;
        /**
          * Dispatched the clear event when the X is clicked.
         */
        "onClear"?: (event: DdSearchCustomEvent<any>) => void;
        /**
          * Dispatched the select event when a search option is clicked.
         */
        "onResultSelected"?: (event: DdSearchCustomEvent<any>) => void;
        /**
          * Dispatched the search event when the search icon is clicked or the enter key is pressed.
         */
        "onSearch"?: (event: DdSearchCustomEvent<any>) => void;
        /**
          * The placeholder to display when no input is showing.
         */
        "placeholder"?: string;
        /**
          * The results of the search.
         */
        "results"?: any;
        /**
          * The value of the input.
         */
        "value"?: any;
    }
    interface DdSessionHandler {
    }
    interface DdSkipToButtons {
    }
    interface DdStatus {
        "activation"?: boolean;
        "active"?: boolean;
        "completed"?: boolean;
        "icon"?: boolean;
        "statusText"?: string;
    }
    interface DdToast {
    }
    interface DdTooltip {
        "ariaText": string;
        "contentId"?: string;
        "tooltipOpened"?: boolean;
    }
    interface DdTooltipContent {
    }
    interface DdUsageHistory {
        "history"?: RouterHistory;
        "onNavigationClicked"?: (event: DdUsageHistoryCustomEvent<string>) => void;
    }
    interface DdWelcome {
        "data"?: any;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "dd-alert": DdAlert;
        "dd-backdrop": DdBackdrop;
        "dd-banner": DdBanner;
        "dd-button": DdButton;
        "dd-chevron": DdChevron;
        "dd-empty-state": DdEmptyState;
        "dd-footer": DdFooter;
        "dd-header": DdHeader;
        "dd-highlight": DdHighlight;
        "dd-icon": DdIcon;
        "dd-input": DdInput;
        "dd-lang-toggle": DdLangToggle;
        "dd-link": DdLink;
        "dd-login-options": DdLoginOptions;
        "dd-login-options-accordion-wrapper": DdLoginOptionsAccordionWrapper;
        "dd-login-options-app": DdLoginOptionsApp;
        "dd-login-options-app-details": DdLoginOptionsAppDetails;
        "dd-login-options-contact-info": DdLoginOptionsContactInfo;
        "dd-login-options-id": DdLoginOptionsId;
        "dd-login-options-id-details": DdLoginOptionsIdDetails;
        "dd-login-options-username": DdLoginOptionsUsername;
        "dd-login-options-username-details": DdLoginOptionsUsernameDetails;
        "dd-menu": DdMenu;
        "dd-modal": DdModal;
        "dd-paginator": DdPaginator;
        "dd-search": DdSearch;
        "dd-session-handler": DdSessionHandler;
        "dd-skip-to-buttons": DdSkipToButtons;
        "dd-status": DdStatus;
        "dd-toast": DdToast;
        "dd-tooltip": DdTooltip;
        "dd-tooltip-content": DdTooltipContent;
        "dd-usage-history": DdUsageHistory;
        "dd-welcome": DdWelcome;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "dd-alert": LocalJSX.DdAlert & JSXBase.HTMLAttributes<HTMLDdAlertElement>;
            "dd-backdrop": LocalJSX.DdBackdrop & JSXBase.HTMLAttributes<HTMLDdBackdropElement>;
            "dd-banner": LocalJSX.DdBanner & JSXBase.HTMLAttributes<HTMLDdBannerElement>;
            "dd-button": LocalJSX.DdButton & JSXBase.HTMLAttributes<HTMLDdButtonElement>;
            "dd-chevron": LocalJSX.DdChevron & JSXBase.HTMLAttributes<HTMLDdChevronElement>;
            "dd-empty-state": LocalJSX.DdEmptyState & JSXBase.HTMLAttributes<HTMLDdEmptyStateElement>;
            "dd-footer": LocalJSX.DdFooter & JSXBase.HTMLAttributes<HTMLDdFooterElement>;
            "dd-header": LocalJSX.DdHeader & JSXBase.HTMLAttributes<HTMLDdHeaderElement>;
            "dd-highlight": LocalJSX.DdHighlight & JSXBase.HTMLAttributes<HTMLDdHighlightElement>;
            "dd-icon": LocalJSX.DdIcon & JSXBase.HTMLAttributes<HTMLDdIconElement>;
            "dd-input": LocalJSX.DdInput & JSXBase.HTMLAttributes<HTMLDdInputElement>;
            "dd-lang-toggle": LocalJSX.DdLangToggle & JSXBase.HTMLAttributes<HTMLDdLangToggleElement>;
            "dd-link": LocalJSX.DdLink & JSXBase.HTMLAttributes<HTMLDdLinkElement>;
            "dd-login-options": LocalJSX.DdLoginOptions & JSXBase.HTMLAttributes<HTMLDdLoginOptionsElement>;
            "dd-login-options-accordion-wrapper": LocalJSX.DdLoginOptionsAccordionWrapper & JSXBase.HTMLAttributes<HTMLDdLoginOptionsAccordionWrapperElement>;
            "dd-login-options-app": LocalJSX.DdLoginOptionsApp & JSXBase.HTMLAttributes<HTMLDdLoginOptionsAppElement>;
            "dd-login-options-app-details": LocalJSX.DdLoginOptionsAppDetails & JSXBase.HTMLAttributes<HTMLDdLoginOptionsAppDetailsElement>;
            "dd-login-options-contact-info": LocalJSX.DdLoginOptionsContactInfo & JSXBase.HTMLAttributes<HTMLDdLoginOptionsContactInfoElement>;
            "dd-login-options-id": LocalJSX.DdLoginOptionsId & JSXBase.HTMLAttributes<HTMLDdLoginOptionsIdElement>;
            "dd-login-options-id-details": LocalJSX.DdLoginOptionsIdDetails & JSXBase.HTMLAttributes<HTMLDdLoginOptionsIdDetailsElement>;
            "dd-login-options-username": LocalJSX.DdLoginOptionsUsername & JSXBase.HTMLAttributes<HTMLDdLoginOptionsUsernameElement>;
            "dd-login-options-username-details": LocalJSX.DdLoginOptionsUsernameDetails & JSXBase.HTMLAttributes<HTMLDdLoginOptionsUsernameDetailsElement>;
            "dd-menu": LocalJSX.DdMenu & JSXBase.HTMLAttributes<HTMLDdMenuElement>;
            "dd-modal": LocalJSX.DdModal & JSXBase.HTMLAttributes<HTMLDdModalElement>;
            "dd-paginator": LocalJSX.DdPaginator & JSXBase.HTMLAttributes<HTMLDdPaginatorElement>;
            "dd-search": LocalJSX.DdSearch & JSXBase.HTMLAttributes<HTMLDdSearchElement>;
            "dd-session-handler": LocalJSX.DdSessionHandler & JSXBase.HTMLAttributes<HTMLDdSessionHandlerElement>;
            "dd-skip-to-buttons": LocalJSX.DdSkipToButtons & JSXBase.HTMLAttributes<HTMLDdSkipToButtonsElement>;
            "dd-status": LocalJSX.DdStatus & JSXBase.HTMLAttributes<HTMLDdStatusElement>;
            "dd-toast": LocalJSX.DdToast & JSXBase.HTMLAttributes<HTMLDdToastElement>;
            "dd-tooltip": LocalJSX.DdTooltip & JSXBase.HTMLAttributes<HTMLDdTooltipElement>;
            "dd-tooltip-content": LocalJSX.DdTooltipContent & JSXBase.HTMLAttributes<HTMLDdTooltipContentElement>;
            "dd-usage-history": LocalJSX.DdUsageHistory & JSXBase.HTMLAttributes<HTMLDdUsageHistoryElement>;
            "dd-welcome": LocalJSX.DdWelcome & JSXBase.HTMLAttributes<HTMLDdWelcomeElement>;
        }
    }
}
